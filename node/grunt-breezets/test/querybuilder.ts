   import extensions = require("breezets");   import typedefs = require("./typedefs");   export class EventQuery   {      private static _instance: EventQuery = null;      static get _Instance(): EventQuery {          if (EventQuery._instance == null)              EventQuery._instance = new EventQuery();          return EventQuery._instance;      }      public Id: extensions.NumberFieldInfo<EventQuery, typedefs.Event> = new extensions.NumberFieldInfo<EventQuery, typedefs.Event>(EventQuery._instance, "Id");       public EventName: extensions.StringFieldInfo<EventQuery, typedefs.Event> = new extensions.StringFieldInfo<EventQuery, typedefs.Event>(EventQuery._instance, "EventName");       public EventTime: extensions.DateFieldInfo<EventQuery, typedefs.Event> = new extensions.DateFieldInfo<EventQuery, typedefs.Event>(EventQuery._instance, "EventTime");       public EventLocation: extensions.StringFieldInfo<EventQuery, typedefs.Event> = new extensions.StringFieldInfo<EventQuery, typedefs.Event>(EventQuery._instance, "EventLocation");       public AccountId: extensions.NumberFieldInfo<EventQuery, typedefs.Event> = new extensions.NumberFieldInfo<EventQuery, typedefs.Event>(EventQuery._instance, "AccountId");       public BoardSets: extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, BoardSetQuery, typedefs.BoardSet> = new extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, BoardSetQuery, typedefs.BoardSet>(EventQuery._Instance, "BoardSets", BoardSetQuery._Instance);      public Pairs: extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, PairQuery, typedefs.Pair> = new extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, PairQuery, typedefs.Pair>(EventQuery._Instance, "Pairs", PairQuery._Instance);      public Players: extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, PlayerQuery, typedefs.Player> = new extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, PlayerQuery, typedefs.Player>(EventQuery._Instance, "Players", PlayerQuery._Instance);      public Rounds: extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, RoundQuery, typedefs.Round> = new extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, RoundQuery, typedefs.Round>(EventQuery._Instance, "Rounds", RoundQuery._Instance);      public Tables: extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, TableQuery, typedefs.Table> = new extensions.MultiAssociationFieldInfo<EventQuery, typedefs.Event, TableQuery, typedefs.Table>(EventQuery._Instance, "Tables", TableQuery._Instance);   }   export class BoardSetQuery   {      private static _instance: BoardSetQuery = null;      static get _Instance(): BoardSetQuery {          if (BoardSetQuery._instance == null)              BoardSetQuery._instance = new BoardSetQuery();          return BoardSetQuery._instance;      }      public Id: extensions.NumberFieldInfo<BoardSetQuery, typedefs.BoardSet> = new extensions.NumberFieldInfo<BoardSetQuery, typedefs.BoardSet>(BoardSetQuery._instance, "Id");       public Name: extensions.StringFieldInfo<BoardSetQuery, typedefs.BoardSet> = new extensions.StringFieldInfo<BoardSetQuery, typedefs.BoardSet>(BoardSetQuery._instance, "Name");       public EventId: extensions.NumberFieldInfo<BoardSetQuery, typedefs.BoardSet> = new extensions.NumberFieldInfo<BoardSetQuery, typedefs.BoardSet>(BoardSetQuery._instance, "EventId");       public BoardRefs: extensions.MultiAssociationFieldInfo<BoardSetQuery, typedefs.BoardSet, BoardRefQuery, typedefs.BoardRef> = new extensions.MultiAssociationFieldInfo<BoardSetQuery, typedefs.BoardSet, BoardRefQuery, typedefs.BoardRef>(BoardSetQuery._Instance, "BoardRefs", BoardRefQuery._Instance);      public Event: extensions.SingleAssociationFieldInfo<BoardSetQuery, typedefs.BoardSet, EventQuery, typedefs.Event> = new extensions.SingleAssociationFieldInfo<BoardSetQuery, typedefs.BoardSet, EventQuery, typedefs.Event>(BoardSetQuery._Instance, "Event");   }   export class BoardRefQuery   {      private static _instance: BoardRefQuery = null;      static get _Instance(): BoardRefQuery {          if (BoardRefQuery._instance == null)              BoardRefQuery._instance = new BoardRefQuery();          return BoardRefQuery._instance;      }      public Id: extensions.NumberFieldInfo<BoardRefQuery, typedefs.BoardRef> = new extensions.NumberFieldInfo<BoardRefQuery, typedefs.BoardRef>(BoardRefQuery._instance, "Id");       public BoardRefNo: extensions.NumberFieldInfo<BoardRefQuery, typedefs.BoardRef> = new extensions.NumberFieldInfo<BoardRefQuery, typedefs.BoardRef>(BoardRefQuery._instance, "BoardRefNo");       public BoardGuid: extensions.StringFieldInfo<BoardRefQuery, typedefs.BoardRef> = new extensions.StringFieldInfo<BoardRefQuery, typedefs.BoardRef>(BoardRefQuery._instance, "BoardGuid");       public BoardSetId: extensions.NumberFieldInfo<BoardRefQuery, typedefs.BoardRef> = new extensions.NumberFieldInfo<BoardRefQuery, typedefs.BoardRef>(BoardRefQuery._instance, "BoardSetId");       public BoardSet: extensions.SingleAssociationFieldInfo<BoardRefQuery, typedefs.BoardRef, BoardSetQuery, typedefs.BoardSet> = new extensions.SingleAssociationFieldInfo<BoardRefQuery, typedefs.BoardRef, BoardSetQuery, typedefs.BoardSet>(BoardRefQuery._Instance, "BoardSet");      public Plan: extensions.MultiAssociationFieldInfo<BoardRefQuery, typedefs.BoardRef, BoardAllocationQuery, typedefs.BoardAllocation> = new extensions.MultiAssociationFieldInfo<BoardRefQuery, typedefs.BoardRef, BoardAllocationQuery, typedefs.BoardAllocation>(BoardRefQuery._Instance, "Plan", BoardAllocationQuery._Instance);   }   export class BoardAllocationQuery   {      private static _instance: BoardAllocationQuery = null;      static get _Instance(): BoardAllocationQuery {          if (BoardAllocationQuery._instance == null)              BoardAllocationQuery._instance = new BoardAllocationQuery();          return BoardAllocationQuery._instance;      }      public Id: extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation> = new extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation>(BoardAllocationQuery._instance, "Id");       public DealId: extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation> = new extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation>(BoardAllocationQuery._instance, "DealId");       public TableId: extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation> = new extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation>(BoardAllocationQuery._instance, "TableId");       public BoardRefId: extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation> = new extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation>(BoardAllocationQuery._instance, "BoardRefId");       public NSScore: extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation> = new extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation>(BoardAllocationQuery._instance, "NSScore");       public EWScore: extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation> = new extensions.NumberFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation>(BoardAllocationQuery._instance, "EWScore");       public BoardRef: extensions.SingleAssociationFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation, BoardRefQuery, typedefs.BoardRef> = new extensions.SingleAssociationFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation, BoardRefQuery, typedefs.BoardRef>(BoardAllocationQuery._Instance, "BoardRef");      public Deal: extensions.SingleAssociationFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation, DealQuery, typedefs.Deal> = new extensions.SingleAssociationFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation, DealQuery, typedefs.Deal>(BoardAllocationQuery._Instance, "Deal");      public Table: extensions.SingleAssociationFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation, TableQuery, typedefs.Table> = new extensions.SingleAssociationFieldInfo<BoardAllocationQuery, typedefs.BoardAllocation, TableQuery, typedefs.Table>(BoardAllocationQuery._Instance, "Table");   }   export class DealQuery   {      private static _instance: DealQuery = null;      static get _Instance(): DealQuery {          if (DealQuery._instance == null)              DealQuery._instance = new DealQuery();          return DealQuery._instance;      }      public Id: extensions.NumberFieldInfo<DealQuery, typedefs.Deal> = new extensions.NumberFieldInfo<DealQuery, typedefs.Deal>(DealQuery._instance, "Id");       public DealNo: extensions.NumberFieldInfo<DealQuery, typedefs.Deal> = new extensions.NumberFieldInfo<DealQuery, typedefs.Deal>(DealQuery._instance, "DealNo");       public RoundId: extensions.NumberFieldInfo<DealQuery, typedefs.Deal> = new extensions.NumberFieldInfo<DealQuery, typedefs.Deal>(DealQuery._instance, "RoundId");       public Round: extensions.SingleAssociationFieldInfo<DealQuery, typedefs.Deal, RoundQuery, typedefs.Round> = new extensions.SingleAssociationFieldInfo<DealQuery, typedefs.Deal, RoundQuery, typedefs.Round>(DealQuery._Instance, "Round");   }   export class RoundQuery   {      private static _instance: RoundQuery = null;      static get _Instance(): RoundQuery {          if (RoundQuery._instance == null)              RoundQuery._instance = new RoundQuery();          return RoundQuery._instance;      }      public Id: extensions.NumberFieldInfo<RoundQuery, typedefs.Round> = new extensions.NumberFieldInfo<RoundQuery, typedefs.Round>(RoundQuery._instance, "Id");       public EventId: extensions.NumberFieldInfo<RoundQuery, typedefs.Round> = new extensions.NumberFieldInfo<RoundQuery, typedefs.Round>(RoundQuery._instance, "EventId");       public RoundNo: extensions.NumberFieldInfo<RoundQuery, typedefs.Round> = new extensions.NumberFieldInfo<RoundQuery, typedefs.Round>(RoundQuery._instance, "RoundNo");       public Deals: extensions.MultiAssociationFieldInfo<RoundQuery, typedefs.Round, DealQuery, typedefs.Deal> = new extensions.MultiAssociationFieldInfo<RoundQuery, typedefs.Round, DealQuery, typedefs.Deal>(RoundQuery._Instance, "Deals", DealQuery._Instance);      public Event: extensions.SingleAssociationFieldInfo<RoundQuery, typedefs.Round, EventQuery, typedefs.Event> = new extensions.SingleAssociationFieldInfo<RoundQuery, typedefs.Round, EventQuery, typedefs.Event>(RoundQuery._Instance, "Event");   }   export class TableQuery   {      private static _instance: TableQuery = null;      static get _Instance(): TableQuery {          if (TableQuery._instance == null)              TableQuery._instance = new TableQuery();          return TableQuery._instance;      }      public Id: extensions.NumberFieldInfo<TableQuery, typedefs.Table> = new extensions.NumberFieldInfo<TableQuery, typedefs.Table>(TableQuery._instance, "Id");       public TableNo: extensions.NumberFieldInfo<TableQuery, typedefs.Table> = new extensions.NumberFieldInfo<TableQuery, typedefs.Table>(TableQuery._instance, "TableNo");       public Label: extensions.StringFieldInfo<TableQuery, typedefs.Table> = new extensions.StringFieldInfo<TableQuery, typedefs.Table>(TableQuery._instance, "Label");       public EventId: extensions.NumberFieldInfo<TableQuery, typedefs.Table> = new extensions.NumberFieldInfo<TableQuery, typedefs.Table>(TableQuery._instance, "EventId");       public Event: extensions.SingleAssociationFieldInfo<TableQuery, typedefs.Table, EventQuery, typedefs.Event> = new extensions.SingleAssociationFieldInfo<TableQuery, typedefs.Table, EventQuery, typedefs.Event>(TableQuery._Instance, "Event");   }   export class PairQuery   {      private static _instance: PairQuery = null;      static get _Instance(): PairQuery {          if (PairQuery._instance == null)              PairQuery._instance = new PairQuery();          return PairQuery._instance;      }      public Id: extensions.NumberFieldInfo<PairQuery, typedefs.Pair> = new extensions.NumberFieldInfo<PairQuery, typedefs.Pair>(PairQuery._instance, "Id");       public Label: extensions.StringFieldInfo<PairQuery, typedefs.Pair> = new extensions.StringFieldInfo<PairQuery, typedefs.Pair>(PairQuery._instance, "Label");       public PairNo: extensions.NumberFieldInfo<PairQuery, typedefs.Pair> = new extensions.NumberFieldInfo<PairQuery, typedefs.Pair>(PairQuery._instance, "PairNo");       public EventId: extensions.NumberFieldInfo<PairQuery, typedefs.Pair> = new extensions.NumberFieldInfo<PairQuery, typedefs.Pair>(PairQuery._instance, "EventId");       public FirstId: extensions.NumberFieldInfo<PairQuery, typedefs.Pair> = new extensions.NumberFieldInfo<PairQuery, typedefs.Pair>(PairQuery._instance, "FirstId");       public SecondId: extensions.NumberFieldInfo<PairQuery, typedefs.Pair> = new extensions.NumberFieldInfo<PairQuery, typedefs.Pair>(PairQuery._instance, "SecondId");       public Event: extensions.SingleAssociationFieldInfo<PairQuery, typedefs.Pair, EventQuery, typedefs.Event> = new extensions.SingleAssociationFieldInfo<PairQuery, typedefs.Pair, EventQuery, typedefs.Event>(PairQuery._Instance, "Event");      public First: extensions.SingleAssociationFieldInfo<PairQuery, typedefs.Pair, PlayerQuery, typedefs.Player> = new extensions.SingleAssociationFieldInfo<PairQuery, typedefs.Pair, PlayerQuery, typedefs.Player>(PairQuery._Instance, "First");      public Plan: extensions.MultiAssociationFieldInfo<PairQuery, typedefs.Pair, PairSeatingQuery, typedefs.PairSeating> = new extensions.MultiAssociationFieldInfo<PairQuery, typedefs.Pair, PairSeatingQuery, typedefs.PairSeating>(PairQuery._Instance, "Plan", PairSeatingQuery._Instance);      public Second: extensions.SingleAssociationFieldInfo<PairQuery, typedefs.Pair, PlayerQuery, typedefs.Player> = new extensions.SingleAssociationFieldInfo<PairQuery, typedefs.Pair, PlayerQuery, typedefs.Player>(PairQuery._Instance, "Second");   }   export class PlayerQuery   {      private static _instance: PlayerQuery = null;      static get _Instance(): PlayerQuery {          if (PlayerQuery._instance == null)              PlayerQuery._instance = new PlayerQuery();          return PlayerQuery._instance;      }      public Id: extensions.NumberFieldInfo<PlayerQuery, typedefs.Player> = new extensions.NumberFieldInfo<PlayerQuery, typedefs.Player>(PlayerQuery._instance, "Id");       public Name: extensions.StringFieldInfo<PlayerQuery, typedefs.Player> = new extensions.StringFieldInfo<PlayerQuery, typedefs.Player>(PlayerQuery._instance, "Name");       public ShortName: extensions.StringFieldInfo<PlayerQuery, typedefs.Player> = new extensions.StringFieldInfo<PlayerQuery, typedefs.Player>(PlayerQuery._instance, "ShortName");       public EventId: extensions.NumberFieldInfo<PlayerQuery, typedefs.Player> = new extensions.NumberFieldInfo<PlayerQuery, typedefs.Player>(PlayerQuery._instance, "EventId");       public Event: extensions.SingleAssociationFieldInfo<PlayerQuery, typedefs.Player, EventQuery, typedefs.Event> = new extensions.SingleAssociationFieldInfo<PlayerQuery, typedefs.Player, EventQuery, typedefs.Event>(PlayerQuery._Instance, "Event");      public Plan: extensions.MultiAssociationFieldInfo<PlayerQuery, typedefs.Player, PlayerSeatingQuery, typedefs.PlayerSeating> = new extensions.MultiAssociationFieldInfo<PlayerQuery, typedefs.Player, PlayerSeatingQuery, typedefs.PlayerSeating>(PlayerQuery._Instance, "Plan", PlayerSeatingQuery._Instance);   }   export class PlayerSeatingQuery   {      private static _instance: PlayerSeatingQuery = null;      static get _Instance(): PlayerSeatingQuery {          if (PlayerSeatingQuery._instance == null)              PlayerSeatingQuery._instance = new PlayerSeatingQuery();          return PlayerSeatingQuery._instance;      }      public Id: extensions.NumberFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating> = new extensions.NumberFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating>(PlayerSeatingQuery._instance, "Id");       public RoundId: extensions.NumberFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating> = new extensions.NumberFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating>(PlayerSeatingQuery._instance, "RoundId");       public TableId: extensions.NumberFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating> = new extensions.NumberFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating>(PlayerSeatingQuery._instance, "TableId");       public PlayerId: extensions.NumberFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating> = new extensions.NumberFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating>(PlayerSeatingQuery._instance, "PlayerId");       public Seat: extensions.StringFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating> = new extensions.StringFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating>(PlayerSeatingQuery._instance, "Seat");       public Player: extensions.SingleAssociationFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating, PlayerQuery, typedefs.Player> = new extensions.SingleAssociationFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating, PlayerQuery, typedefs.Player>(PlayerSeatingQuery._Instance, "Player");      public Round: extensions.SingleAssociationFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating, RoundQuery, typedefs.Round> = new extensions.SingleAssociationFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating, RoundQuery, typedefs.Round>(PlayerSeatingQuery._Instance, "Round");      public Table: extensions.SingleAssociationFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating, TableQuery, typedefs.Table> = new extensions.SingleAssociationFieldInfo<PlayerSeatingQuery, typedefs.PlayerSeating, TableQuery, typedefs.Table>(PlayerSeatingQuery._Instance, "Table");   }   export class PairSeatingQuery   {      private static _instance: PairSeatingQuery = null;      static get _Instance(): PairSeatingQuery {          if (PairSeatingQuery._instance == null)              PairSeatingQuery._instance = new PairSeatingQuery();          return PairSeatingQuery._instance;      }      public Id: extensions.NumberFieldInfo<PairSeatingQuery, typedefs.PairSeating> = new extensions.NumberFieldInfo<PairSeatingQuery, typedefs.PairSeating>(PairSeatingQuery._instance, "Id");       public RoundId: extensions.NumberFieldInfo<PairSeatingQuery, typedefs.PairSeating> = new extensions.NumberFieldInfo<PairSeatingQuery, typedefs.PairSeating>(PairSeatingQuery._instance, "RoundId");       public TableId: extensions.NumberFieldInfo<PairSeatingQuery, typedefs.PairSeating> = new extensions.NumberFieldInfo<PairSeatingQuery, typedefs.PairSeating>(PairSeatingQuery._instance, "TableId");       public PairId: extensions.NumberFieldInfo<PairSeatingQuery, typedefs.PairSeating> = new extensions.NumberFieldInfo<PairSeatingQuery, typedefs.PairSeating>(PairSeatingQuery._instance, "PairId");       public IsNS: extensions.BooleanFieldInfo<PairSeatingQuery, typedefs.PairSeating> = new extensions.BooleanFieldInfo<PairSeatingQuery, typedefs.PairSeating>(PairSeatingQuery._instance, "IsNS");       public Pair: extensions.SingleAssociationFieldInfo<PairSeatingQuery, typedefs.PairSeating, PairQuery, typedefs.Pair> = new extensions.SingleAssociationFieldInfo<PairSeatingQuery, typedefs.PairSeating, PairQuery, typedefs.Pair>(PairSeatingQuery._Instance, "Pair");      public Round: extensions.SingleAssociationFieldInfo<PairSeatingQuery, typedefs.PairSeating, RoundQuery, typedefs.Round> = new extensions.SingleAssociationFieldInfo<PairSeatingQuery, typedefs.PairSeating, RoundQuery, typedefs.Round>(PairSeatingQuery._Instance, "Round");      public Table: extensions.SingleAssociationFieldInfo<PairSeatingQuery, typedefs.PairSeating, TableQuery, typedefs.Table> = new extensions.SingleAssociationFieldInfo<PairSeatingQuery, typedefs.PairSeating, TableQuery, typedefs.Table>(PairSeatingQuery._Instance, "Table");   }