   import * as breeze from "breeze-client";   import * as extensions from "breezets";   import * as typedefs from "./typedefs";   import * as querybuilder from "./querybuilder";   export class PlansManager   {      private _entityManager: breeze.EntityManager = null;      constructor(serverUrl: string);      constructor(breezeManager: breeze.EntityManager);      constructor(server: string | breeze.EntityManager = null)      {          if (server == null)          {              throw "Cannot use a null or empty URL when connecting to a PlansManager data service";          }          else if (typeof server === "string")          {              this._entityManager = new breeze.EntityManager(server as string);          }          else          {              this._entityManager = server as breeze.EntityManager;          }      }      public hasChanges(): boolean      {          return this._entityManager.hasChanges();      }      public saveChanges(): Promise<breeze.SaveResult>      {          var promise = this._entityManager.saveChanges();          return promise;      }      public get Events(): extensions.TEntitySet<querybuilder.EventQuery, typedefs.Event>      {          return new extensions.TEntitySet<querybuilder.EventQuery, typedefs.Event>(              this._entityManager,               "typedefs.Event",               "Events",               querybuilder.EventQuery._Instance,               null,               null);      }      public get BoardSets(): extensions.TEntitySet<querybuilder.BoardSetQuery, typedefs.BoardSet>      {          return new extensions.TEntitySet<querybuilder.BoardSetQuery, typedefs.BoardSet>(              this._entityManager,               "typedefs.BoardSet",               "BoardSets",               querybuilder.BoardSetQuery._Instance,               null,               null);      }      public get BoardRefs(): extensions.TEntitySet<querybuilder.BoardRefQuery, typedefs.BoardRef>      {          return new extensions.TEntitySet<querybuilder.BoardRefQuery, typedefs.BoardRef>(              this._entityManager,               "typedefs.BoardRef",               "BoardRefs",               querybuilder.BoardRefQuery._Instance,               null,               null);      }      public get BoardAllocations(): extensions.TEntitySet<querybuilder.BoardAllocationQuery, typedefs.BoardAllocation>      {          return new extensions.TEntitySet<querybuilder.BoardAllocationQuery, typedefs.BoardAllocation>(              this._entityManager,               "typedefs.BoardAllocation",               "BoardAllocations",               querybuilder.BoardAllocationQuery._Instance,               null,               null);      }      public get Deals(): extensions.TEntitySet<querybuilder.DealQuery, typedefs.Deal>      {          return new extensions.TEntitySet<querybuilder.DealQuery, typedefs.Deal>(              this._entityManager,               "typedefs.Deal",               "Deals",               querybuilder.DealQuery._Instance,               null,               null);      }      public get Rounds(): extensions.TEntitySet<querybuilder.RoundQuery, typedefs.Round>      {          return new extensions.TEntitySet<querybuilder.RoundQuery, typedefs.Round>(              this._entityManager,               "typedefs.Round",               "Rounds",               querybuilder.RoundQuery._Instance,               null,               null);      }      public get Tables(): extensions.TEntitySet<querybuilder.TableQuery, typedefs.Table>      {          return new extensions.TEntitySet<querybuilder.TableQuery, typedefs.Table>(              this._entityManager,               "typedefs.Table",               "Tables",               querybuilder.TableQuery._Instance,               null,               null);      }      public get Pairs(): extensions.TEntitySet<querybuilder.PairQuery, typedefs.Pair>      {          return new extensions.TEntitySet<querybuilder.PairQuery, typedefs.Pair>(              this._entityManager,               "typedefs.Pair",               "Pairs",               querybuilder.PairQuery._Instance,               null,               null);      }      public get Players(): extensions.TEntitySet<querybuilder.PlayerQuery, typedefs.Player>      {          return new extensions.TEntitySet<querybuilder.PlayerQuery, typedefs.Player>(              this._entityManager,               "typedefs.Player",               "Players",               querybuilder.PlayerQuery._Instance,               null,               null);      }      public get PlayerSeatings(): extensions.TEntitySet<querybuilder.PlayerSeatingQuery, typedefs.PlayerSeating>      {          return new extensions.TEntitySet<querybuilder.PlayerSeatingQuery, typedefs.PlayerSeating>(              this._entityManager,               "typedefs.PlayerSeating",               "PlayerSeatings",               querybuilder.PlayerSeatingQuery._Instance,               null,               null);      }      public get PairSeatings(): extensions.TEntitySet<querybuilder.PairSeatingQuery, typedefs.PairSeating>      {          return new extensions.TEntitySet<querybuilder.PairSeatingQuery, typedefs.PairSeating>(              this._entityManager,               "typedefs.PairSeating",               "PairSeatings",               querybuilder.PairSeatingQuery._Instance,               null,               null);      }   }